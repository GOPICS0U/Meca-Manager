// events/interactionCreate.js
const { ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const fs = require('fs');
const path = require('path');
const { createRepairEmbed, createNotificationEmbed, createInvoiceEmbed, EMOJIS } = require('../utils/embedStyles');

module.exports = {
  name: 'interactionCreate',
  once: false,
  
  async execute(interaction, client) {
    // Gestion des commandes slash
    if (interaction.isCommand()) {
      const command = client.commands.get(interaction.commandName);
      
      if (!command) {
        console.error(`‚ùå Commande ${interaction.commandName} introuvable.`);
        return;
      }
      
      try {
        await command.execute(interaction, client);
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'ex√©cution de la commande:', error);
        const errorReply = { content: '‚ùå Une erreur est survenue lors de l\'ex√©cution de cette commande!', ephemeral: true };
        
        if (interaction.replied || interaction.deferred) {
          await interaction.followUp(errorReply);
        } else {
          await interaction.reply(errorReply);
        }
      }
    }
    
    // Gestion des boutons
    if (interaction.isButton()) {
      const customId = interaction.customId;
      
      // Boutons de r√©paration
      if (customId.startsWith('repair_')) {
        const [action, repairId] = customId.split('_').slice(1);
        await handleRepairButton(interaction, action, repairId);
      }
      
      // Boutons de facture
      if (customId.startsWith('pay_') || customId.startsWith('dispute_')) {
        const [action, factureId] = customId.split('_');
        await handleFactureButton(interaction, action, factureId);
      }
      
      // Boutons du panel d'administration
      if (customId.startsWith('panel_')) {
        // Ces boutons sont g√©r√©s directement dans la commande panel.js
        // via les collecteurs d'√©v√©nements
      }
    }
  }
};

/**
 * G√®re les interactions avec les boutons de r√©paration
 * @param {ButtonInteraction} interaction - L'interaction bouton
 * @param {String} action - L'action √† effectuer (accept, reject, progress, complete)
 * @param {String} repairId - L'ID de la r√©paration
 */
async function handleRepairButton(interaction, action, repairId) {
  // V√©rifier si l'utilisateur a un r√¥le de m√©canicien ou patron
  const member = interaction.member;
  const hasRole = member.roles.cache.some(role => 
    role.name.includes('M√©canicien') || 
    role.name.includes('Chef M√©canicien') || 
    role.name.includes('Stagiaire') || 
    role.name.includes('Patron')
  );
  
  if (!hasRole) {
    return interaction.reply({
      content: "‚ùå Seuls les membres de l'√©quipe peuvent g√©rer les r√©parations!",
      ephemeral: true
    });
  }
  
  // R√©cup√©rer les donn√©es de r√©paration pour v√©rifier le niveau requis
  const dbPath = path.join(__dirname, '../data/repairs.json');
  let repairs = [];
  
  if (fs.existsSync(dbPath)) {
    const data = fs.readFileSync(dbPath, 'utf8');
    repairs = JSON.parse(data);
  }
  
  // Trouver la r√©paration correspondante
  const repairIndex = repairs.findIndex(r => r.id === repairId);
  
  if (repairIndex === -1) {
    return interaction.reply({
      content: `‚ùå R√©paration #${repairId} introuvable dans la base de donn√©es.`,
      ephemeral: true
    });
  }
  
  const repair = repairs[repairIndex];
  
  // V√©rifier si le m√©canicien a le niveau requis pour cette r√©paration
  const isStaff = member.roles.cache.some(role => role.name.includes('Patron') || role.name.includes('Chef M√©canicien'));
  
  if (!isStaff) { // Si ce n'est pas un patron ou chef m√©canicien, v√©rifier le niveau
    const complexite = repair.complexite || 'moyenne';
    const isStagiaire = member.roles.cache.some(role => role.name.includes('Stagiaire'));
    const isJunior = member.roles.cache.some(role => role.name.includes('M√©canicien Junior'));
    const isMecanicien = member.roles.cache.some(role => role.name.includes('M√©canicien') && !role.name.includes('Junior') && !role.name.includes('Senior') && !role.name.includes('Chef'));
    const isSenior = member.roles.cache.some(role => role.name.includes('M√©canicien Senior'));
    
    let canHandle = false;
    
    switch (complexite) {
      case 'simple':
        canHandle = true; // Tout le monde peut g√©rer les r√©parations simples
        break;
      case 'moyenne':
        canHandle = !isStagiaire; // Tout le monde sauf les stagiaires
        break;
      case 'complexe':
        canHandle = isMecanicien || isSenior; // M√©canicien ou sup√©rieur
        break;
      case 'tres_complexe':
        canHandle = isSenior; // Uniquement Senior
        break;
      default:
        canHandle = !isStagiaire; // Par d√©faut, tout le monde sauf les stagiaires
    }
    
    if (!canHandle) {
      return interaction.reply({
        content: `‚ùå Cette r√©paration n√©cessite un niveau de comp√©tence sup√©rieur au v√¥tre. Demandez √† un m√©canicien plus exp√©riment√© de s'en occuper.`,
        ephemeral: true
      });
    }
  }
  
  // On utilise les donn√©es de r√©paration d√©j√† r√©cup√©r√©es plus haut
  
  // Mettre √† jour le statut selon l'action
  let newStatus, statusText, color, targetChannel;
  
  switch (action) {
    case 'accept':
      newStatus = 'accepted';
      statusText = '‚úÖ Accept√©e';
      color = '#00AA00';
      targetChannel = interaction.guild.channels.cache.find(ch => ch.name === 'üîßen-cours');
      break;
    case 'reject':
      newStatus = 'rejected';
      statusText = '‚ùå Refus√©e';
      color = '#FF0000';
      break;
    case 'progress':
      newStatus = 'in_progress';
      statusText = 'üîß En cours';
      color = '#FFA500';
      targetChannel = interaction.guild.channels.cache.find(ch => ch.name === 'üîßen-cours');
      break;
    case 'complete':
      newStatus = 'completed';
      statusText = 'üèÅ Termin√©e';
      color = '#00AAFF';
      targetChannel = interaction.guild.channels.cache.find(ch => ch.name === '‚úÖtermin√©');
      break;
  }
  
  // Mettre √† jour l'embed avec le nouveau style luxueux
  const message = await interaction.message.fetch();
  
  // Mettre √† jour les donn√©es de r√©paration
  repair.status = newStatus;
  repair.assignedTo = interaction.user.id;
  repair.lastUpdated = Date.now();
  
  // Cr√©er un nouvel embed luxueux
  const updatedEmbed = createRepairEmbed(repair, newStatus);
  
  // Mettre √† jour le message
  await interaction.message.edit({
    embeds: [updatedEmbed],
    components: message.components
  });
  
  // Si un canal cible est d√©fini, d√©placer la demande
  if (targetChannel && action !== 'reject') {
    const newMessage = await targetChannel.send({
      embeds: [updatedEmbed],
      components: message.components
    });
    
    // Supprimer l'ancien message
    await interaction.message.delete();
    
    // Mettre √† jour l'ID du message dans la base de donn√©es
    repair.messageId = newMessage.id;
  }
  
  // Ces valeurs sont d√©j√† mises √† jour plus haut
  
  repairs[repairIndex] = repair;
  fs.writeFileSync(dbPath, JSON.stringify(repairs, null, 2));
  
  // Notifier l'utilisateur avec un message luxueux
  const client = await interaction.client.users.fetch(repair.userId);
  
  try {
    // Cr√©er un embed de notification premium
    const notificationFields = [
      { name: `${EMOJIS.STATS} Nouveau statut`, value: statusText, inline: true },
      { name: `${EMOJIS.MECHANIC} M√©canicien`, value: `<@${interaction.user.id}>`, inline: true },
      { name: `${EMOJIS.VEHICLE.CAR} V√©hicule`, value: repair.vehicule, inline: true }
    ];
    
    const notificationEmbed = createNotificationEmbed(
      `Mise √† jour de votre r√©paration #${repairId}`,
      `Votre demande de service pour votre ${repair.vehicule} a √©t√© mise √† jour par notre √©quipe de m√©caniciens d'√©lite.`,
      'info',
      notificationFields
    );
    
    await client.send({
      content: `${EMOJIS.INFO} **Auto Exotic** vous informe d'une mise √† jour concernant votre v√©hicule`,
      embeds: [notificationEmbed]
    });
  } catch (error) {
    console.error(`Impossible d'envoyer un MP √† l'utilisateur:`, error);
  }
  
  // R√©pondre √† l'interaction avec un message plus √©l√©gant
  return interaction.reply({
    embeds: [
      createNotificationEmbed(
        `R√©paration #${repairId} mise √† jour`,
        `La demande de r√©paration a √©t√© mise √† jour avec succ√®s.`,
        'success',
        [{ name: `${EMOJIS.STATS} Nouveau statut`, value: statusText, inline: true }]
      )
    ],
    ephemeral: true
  });
}

/**
 * G√®re les interactions avec les boutons de facture
 * @param {ButtonInteraction} interaction - L'interaction bouton
 * @param {String} action - L'action √† effectuer (pay, dispute)
 * @param {String} factureId - L'ID de la facture
 */
async function handleFactureButton(interaction, action, factureId) {
  const message = await interaction.message.fetch();
  const embed = message.embeds[0];
  
  // R√©cup√©rer les donn√©es de facture
  const dbPath = path.join(__dirname, '../data/invoices.json');
  let invoices = [];
  
  if (fs.existsSync(dbPath)) {
    const data = fs.readFileSync(dbPath, 'utf8');
    invoices = JSON.parse(data);
  } else {
    return interaction.reply({
      content: `‚ùå Base de donn√©es des factures introuvable.`,
      ephemeral: true
    });
  }
  
  // Trouver la facture correspondante
  const invoiceIndex = invoices.findIndex(inv => inv.id === factureId);
  
  if (invoiceIndex === -1) {
    return interaction.reply({
      content: `‚ùå Facture #${factureId} introuvable dans la base de donn√©es.`,
      ephemeral: true
    });
  }
  
  const invoice = invoices[invoiceIndex];
  const now = Date.now();
  
  if (action === 'pay') {
    // Mettre √† jour l'embed avec le nouveau style luxueux
    invoice.status = 'paid';
    invoice.paidAt = now;
    invoice.paidBy = interaction.user.id;
    
    const updatedEmbed = createInvoiceEmbed(invoice, 'paid');
    
    // D√©sactiver les boutons
    const updatedComponents = [
      {
        type: 1,
        components: [
          {
            type: 2,
            style: 3,
            label: 'Pay√©e',
            custom_id: `paid_${factureId}`,
            emoji: { name: '‚úÖ' },
            disabled: true
          }
        ]
      }
    ];
    
    // Mettre √† jour le message
    await interaction.message.edit({
      embeds: [updatedEmbed],
      components: updatedComponents
    });
    // Ces valeurs sont d√©j√† mises √† jour plus haut
    invoices[invoiceIndex] = invoice;
    fs.writeFileSync(dbPath, JSON.stringify(invoices, null, 2));
    
    // Notifier le m√©canicien avec un message luxueux
    try {
      const mechanic = await interaction.client.users.fetch(invoice.mechanicId);
      
      // Cr√©er un embed de notification premium pour le paiement
      const notificationFields = [
        { name: `${EMOJIS.MONEY} Montant`, value: `**${invoice.montant}$**`, inline: true },
        { name: `${EMOJIS.CLIENT} Client`, value: invoice.clientName, inline: true },
        { name: `${EMOJIS.CALENDAR} Date de paiement`, value: new Date(now).toLocaleString('fr-FR'), inline: true },
        { name: `${EMOJIS.VEHICLE.CAR} V√©hicule`, value: invoice.vehicule, inline: true }
      ];
      
      const notificationEmbed = createNotificationEmbed(
        `Paiement re√ßu pour la facture #${factureId}`,
        `F√©licitations ! Votre client a effectu√© le paiement pour les services rendus.`,
        'success',
        notificationFields
      );
      
      await mechanic.send({
        content: `${EMOJIS.MONEY} **Auto Exotic** vous informe qu'un paiement a √©t√© re√ßu`,
        embeds: [notificationEmbed]
      });
    } catch (error) {
      console.error(`Impossible d'envoyer un MP au m√©canicien:`, error);
    }
    
    // R√©pondre avec un message √©l√©gant
    return interaction.reply({
      embeds: [
        createNotificationEmbed(
          `Paiement effectu√© avec succ√®s`,
          `Merci pour votre paiement! La facture #${factureId} a √©t√© marqu√©e comme pay√©e.`,
          'success',
          [{ name: `${EMOJIS.MONEY} Montant pay√©`, value: `**${invoice.montant}$**`, inline: true }]
        )
      ],
      ephemeral: true
    });
  } else if (action === 'dispute') {
    // Mettre √† jour l'embed avec le nouveau style luxueux
    invoice.status = 'disputed';
    invoice.disputedAt = now;
    invoice.disputedBy = interaction.user.id;
    
    const updatedEmbed = createInvoiceEmbed(invoice, 'disputed');
    
    // Mettre √† jour le message
    await interaction.message.edit({
      embeds: [updatedEmbed],
      components: message.components
    });
    
    // Ces valeurs sont d√©j√† mises √† jour plus haut
    invoices[invoiceIndex] = invoice;
    fs.writeFileSync(dbPath, JSON.stringify(invoices, null, 2));
    
    // Notifier le m√©canicien et le patron avec un message luxueux
    try {
      const mechanic = await interaction.client.users.fetch(invoice.mechanicId);
      
      // Cr√©er un embed de notification premium pour la contestation
      const notificationFields = [
        { name: `${EMOJIS.MONEY} Montant`, value: `**${invoice.montant}$**`, inline: true },
        { name: `${EMOJIS.CLIENT} Client`, value: invoice.clientName, inline: true },
        { name: `${EMOJIS.CALENDAR} Date de contestation`, value: new Date(now).toLocaleString('fr-FR'), inline: true },
        { name: `${EMOJIS.VEHICLE.CAR} V√©hicule`, value: invoice.vehicule, inline: true }
      ];
      
      const notificationEmbed = createNotificationEmbed(
        `Facture contest√©e #${factureId}`,
        `Un client a contest√© votre facture. Un responsable va examiner cette situation dans les plus brefs d√©lais.`,
        'warning',
        notificationFields
      );
      
      await mechanic.send({
        content: `${EMOJIS.WARNING} **Auto Exotic** vous informe qu'une facture a √©t√© contest√©e`,
        embeds: [notificationEmbed]
      });
      
      // Trouver un patron pour le notifier
      const guild = await interaction.client.guilds.fetch(invoice.guildId);
      const patronRole = guild.roles.cache.find(role => role.name.includes('Patron'));
      
      if (patronRole) {
        const patrons = await guild.members.fetch({ roles: [patronRole.id] });
        patrons.forEach(async patron => {
          try {
            // Cr√©er un embed de notification premium pour le patron
            const patronFields = [
              { name: `${EMOJIS.MECHANIC} M√©canicien`, value: `<@${invoice.mechanicId}>`, inline: true },
              { name: `${EMOJIS.CLIENT} Client`, value: `<@${invoice.clientId}>`, inline: true },
              { name: `${EMOJIS.VEHICLE.CAR} V√©hicule`, value: invoice.vehicule, inline: true },
              { name: `${EMOJIS.WRENCH} Travaux`, value: invoice.description, inline: false },
              { name: `${EMOJIS.MONEY} Montant`, value: `**${invoice.montant}$**`, inline: true },
              { name: `${EMOJIS.CALENDAR} Date d'√©mission`, value: new Date(invoice.createdAt).toLocaleString('fr-FR'), inline: true },
              { name: `${EMOJIS.CALENDAR} Date de contestation`, value: new Date(now).toLocaleString('fr-FR'), inline: true }
            ];
            
            const patronEmbed = createNotificationEmbed(
              `URGENT: Facture contest√©e #${factureId}`,
              `Une facture a √©t√© contest√©e et n√©cessite votre intervention imm√©diate en tant que responsable.`,
              'error',
              patronFields
            );
            
            await patron.send({
              content: `${EMOJIS.WARNING} **ATTENTION** - Une situation requiert votre intervention en tant que responsable d'Auto Exotic`,
              embeds: [patronEmbed]
            });
          } catch (error) {
            console.error(`Impossible d'envoyer un MP au patron:`, error);
          }
        });
      }
    } catch (error) {
      console.error(`Erreur lors de la notification:`, error);
    }
    
    
    // R√©pondre avec un message √©l√©gant
    return interaction.reply({
      embeds: [
        createNotificationEmbed(
          `Contestation enregistr√©e`,
          `Vous avez contest√© la facture #${factureId}. Un responsable va examiner votre demande dans les plus brefs d√©lais.`,
          'warning',
          [
            { name: `${EMOJIS.MONEY} Montant contest√©`, value: `**${invoice.montant}$**`, inline: true },
            { name: `${EMOJIS.CALENDAR} Date de contestation`, value: new Date(now).toLocaleString('fr-FR'), inline: true }
          ]
        )
      ],
      ephemeral: true
    });
  }
}
